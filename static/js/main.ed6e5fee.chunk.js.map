{"version":3,"sources":["components/DateDisplay.js","components/DateController.js","App.js","reportWebVitals.js","index.js"],"names":["props","dateShow","colors","useState","barWidth","setBarWidth","height","window","innerHeight","width","innerWidth","setDimensions","barColor","useEffect","bar","document","getElementsByClassName","handleResize","getBoundingClientRect","addEventListener","_","removeEventListener","hoursLeft","progressTimeMax","progressTimeCurrent","Date","UTC","getUTCHours","minutesLeft","getUTCMinutes","secondsLeft","getUTCSeconds","mSecondsLeft","getUTCMilliseconds","className","style","wholeBar","timestampStart","currentPercentTime","currentPositionBar","Math","round","calculatePosition","backgroundColor","DateController","initState","now","timestampEnd","realTimeStart","working","ended","timePreview","state","_increasement","a","correction","setState","setTimeout","startIncreasement","changeDate","name","value","getTime","data-enable-time","this","options","minuteIncrement","enableSeconds","onChange","date","onClick","DateDisplay","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ed6e5fee.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default (props) => {\r\n    const colors = {\r\n        green: 'rgb(45, 255, 133)',\r\n        yellow: 'rgb(217, 219, 56)',\r\n        orange: 'rgb(255, 145, 82)',\r\n        red: 'rgb(255, 93, 87)'\r\n    };\r\n    const [barWidth, setBarWidth] = useState();\r\n    const [dimensions, setDimensions] = useState({\r\n        height: window.innerHeight,\r\n        width: window.innerWidth\r\n    });\r\n    let barColor = null;\r\n\r\n    useEffect(() => {\r\n        const bar = document.getElementsByClassName('bar')[0];\r\n        setBarWidth((bar.getBoundingClientRect()).width);\r\n\r\n        function handleResize() {\r\n            setDimensions({\r\n                height: window.innerHeight,\r\n                width: window.innerWidth\r\n            })\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n\r\n        return _ => {\r\n            window.removeEventListener('resize', handleResize)\r\n        };\r\n    });\r\n\r\n    function calculatePosition() {\r\n        if (props.progressTimeMax !== 0) {\r\n            let wholeBar = props.progressTimeMax - props.timestampStart;\r\n            let current = wholeBar - (props.progressTimeMax - props.progressTimeCurrent);\r\n            let currentPercentTime = (current / wholeBar) * 100;\r\n            let currentPositionBar = Math.round(barWidth / 100 * currentPercentTime);\r\n\r\n            if (currentPercentTime <= 25 && barColor !== colors.green) {\r\n                barColor = colors.green;\r\n            }\r\n            else if (currentPercentTime <= 50 && barColor !== colors.yellow) {\r\n                barColor = colors.yellow;\r\n            }\r\n            else if (currentPercentTime <= 75 && barColor !== colors.orange) {\r\n                barColor = colors.orange;\r\n            }\r\n            else if (currentPercentTime <= 100 && barColor !== colors.red) {\r\n                barColor = colors.red;\r\n            }\r\n\r\n            return currentPositionBar;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    let dateShow;\r\n    if (props.progressTimeMax && props.progressTimeCurrent && props.progressTimeCurrent < props.progressTimeMax)\r\n        dateShow = new Date(props.progressTimeMax - props.progressTimeCurrent); //1899-01-01 / X-X-X\r\n    else {\r\n        dateShow = new Date(Date.UTC(0, 0, 0, 0, 0, 0, 0));\r\n    }\r\n\r\n    let hoursLeft = dateShow.getUTCHours();\r\n    let minutesLeft = dateShow.getUTCMinutes();\r\n    let secondsLeft = dateShow.getUTCSeconds();\r\n    let mSecondsLeft = dateShow.getUTCMilliseconds();\r\n\r\n    return (\r\n        <div className=\"dateDisplay\">\r\n            <div className=\"time\">\r\n                <p>{hoursLeft < 10 ? '0' + hoursLeft : hoursLeft}</p>:\r\n                <p>{minutesLeft < 10 ? '0' + minutesLeft : minutesLeft}</p>\r\n                :\r\n                <p>{secondsLeft < 10 ? '0' + secondsLeft : secondsLeft}</p>\r\n                :\r\n                <p>{mSecondsLeft < 10 ? '00' + mSecondsLeft :\r\n                    mSecondsLeft < 100 ? '0' + mSecondsLeft :\r\n                        mSecondsLeft === 1000 ? 999 : mSecondsLeft}</p>\r\n            </div>\r\n\r\n            <div className=\"percents-nums\">\r\n                <p>25%</p>\r\n                <p>50%</p>\r\n                <p>75%</p>\r\n            </div>\r\n\r\n            <span className=\"bar\">\r\n                <p\r\n                    className=\"bar-outer\"\r\n                    style={{\r\n                        width: barWidth + 'px'\r\n                    }}>\r\n                </p>\r\n                <p\r\n                    className=\"bar-inner\"\r\n                    style={{\r\n                        width: calculatePosition() + 'px',\r\n                        backgroundColor: barColor,\r\n                    }}>\r\n                </p>\r\n            </span>\r\n\r\n            <div className=\"percents-marks\">\r\n                <p>|</p>\r\n                <p>|</p>\r\n                <p>|</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport Flatpickr from \"react-flatpickr\";\r\nimport \"flatpickr/dist/themes/dark.css\";\r\nimport DateDisplay from './DateDisplay'\r\nimport './DateController.css';\r\nimport './DateDisplay.css';\r\n\r\nexport class DateController extends React.Component {\r\n    initState = {\r\n        timestampStart: Date.now(),\r\n        timestampEnd: Date.now(),\r\n        realTimeStart: 0,\r\n        progressTimeCurrent: 0,\r\n        progressTimeMax: 0,\r\n        working: false,\r\n        ended: false,\r\n        timePreview: false\r\n    };\r\n\r\n    state = this.initState;\r\n\r\n    _increasement = async () => {\r\n\r\n        let correction = Date.now() - this.state.realTimeStart;\r\n\r\n        if (this.state.timestampStart + correction >= this.state.progressTimeMax)\r\n            correction = this.state.timestampEnd - this.state.timestampStart;\r\n\r\n        await this.setState({\r\n            progressTimeCurrent: this.state.timestampStart + correction,\r\n        });\r\n\r\n        if (this.state.progressTimeCurrent < this.state.progressTimeMax) {\r\n            setTimeout(this._increasement, 1);\r\n        }\r\n        else {\r\n            await this.setState({\r\n                working: false,\r\n                ended: true,\r\n                timePreview: false\r\n            });\r\n        }\r\n    }\r\n\r\n    startIncreasement = async () => {\r\n        if (!this.state.working && this.state.timestampStart < this.state.timestampEnd) {\r\n            await this.setState({\r\n                progressTimeCurrent: this.state.timestampStart,\r\n                progressTimeMax: this.state.timestampEnd,\r\n                realTimeStart: Date.now(),\r\n                working: true,\r\n                ended: false\r\n            })\r\n\r\n            setTimeout(this._increasement, 1);\r\n        }\r\n    }\r\n\r\n    changeDate = async (name, value) => {\r\n        if (!this.state.working) {\r\n            await this.setState({\r\n                [name]: (new Date(value)).getTime(),\r\n                timePreview: true\r\n            });\r\n\r\n            this.setState({\r\n                progressTimeCurrent: this.state.timestampStart,\r\n                progressTimeMax: this.state.timestampEnd,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dateController\">\r\n                <div className=\"pickerBlock\">\r\n                    <p>From</p>\r\n                    <Flatpickr\r\n                        data-enable-time\r\n                        value={this.state.timestampStart}\r\n                        options={{\r\n                            minuteIncrement: 1,\r\n                            enableSeconds: true\r\n                        }}\r\n                        onChange={date => this.changeDate('timestampStart', date)}\r\n                    />\r\n                    <button onClick={() => this.changeDate('timestampStart', new Date())}>Current time</button>\r\n                </div>\r\n                <div className=\"pickerBlock\">\r\n                    <p>To</p>\r\n                    <Flatpickr\r\n                        data-enable-time\r\n                        value={this.state.timestampEnd}\r\n                        options={{\r\n                            minuteIncrement: 1,\r\n                            enableSeconds: true\r\n                        }}\r\n                        onChange={date => this.changeDate('timestampEnd', date)}\r\n                    />\r\n                    <button onClick={() => this.changeDate('timestampEnd', new Date())}>Current time</button>\r\n                </div>\r\n\r\n                {this.state.working || this.state.timePreview ?\r\n                    <DateDisplay\r\n                        timestampStart={this.state.timestampStart}\r\n                        progressTimeCurrent={this.state.progressTimeCurrent}\r\n                        progressTimeMax={this.state.progressTimeMax}\r\n                    />\r\n                    : <p className=\"no-active-bar\">Set time and press RUN</p>}\r\n                {this.state.ended ? <p className=\"timer-finished\">Last timer finished successfully</p> : null}\r\n\r\n                <span className=\"buttonsWrap\">\r\n                    <button onClick={this.startIncreasement}>Run</button>\r\n                    <button onClick={() => this.setState(this.initState)}>Reset</button>\r\n                </span>\r\n            </div >\r\n        )\r\n    }\r\n}","import './App.css';\r\nimport { DateController } from './components/DateController';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Timer</h1>\r\n      <DateController />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}