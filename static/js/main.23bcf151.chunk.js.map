{"version":3,"sources":["components/DateDisplay.js","components/DateController.js","App.js","reportWebVitals.js","index.js"],"names":["props","dateShow","useState","barWidth","setBarWidth","height","window","innerHeight","width","innerWidth","setDimensions","useEffect","bar","document","getElementsByClassName","handleResize","getBoundingClientRect","addEventListener","_","removeEventListener","hoursLeft","progressTimeMax","progressTimeCurrent","Date","UTC","getUTCHours","minutesLeft","getUTCMinutes","secondsLeft","getUTCSeconds","mSecondsLeft","getUTCMilliseconds","className","style","wholeBar","timestampStart","currentPercentTime","Math","round","calculatePosition","DateController","initState","now","timestampEnd","realTimeStart","overallCorrection","working","ended","state","_increasement","a","correction","setState","setTimeout","startIncreasement","data-enable-time","value","this","options","minuteIncrement","enableSeconds","onChange","date","getTime","onClick","DateDisplay","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.23bcf151.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default (props) => {\r\n    const [barWidth, setBarWidth] = useState();\r\n    const [dimensions, setDimensions] = useState({\r\n        height: window.innerHeight,\r\n        width: window.innerWidth\r\n    })\r\n\r\n    useEffect(() => {\r\n        const bar = document.getElementsByClassName('bar')[0];\r\n        setBarWidth((bar.getBoundingClientRect()).width);\r\n\r\n        function handleResize() {\r\n            setDimensions({\r\n                height: window.innerHeight,\r\n                width: window.innerWidth\r\n            })\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n\r\n        return _ => {\r\n            window.removeEventListener('resize', handleResize)\r\n        };\r\n    });\r\n\r\n    function calculatePosition() {\r\n        if (props.progressTimeMax !== 0) {\r\n            let wholeBar = props.progressTimeMax - props.timestampStart;\r\n            let current = wholeBar - (props.progressTimeMax - props.progressTimeCurrent);\r\n            let currentPercentTime = (current / wholeBar) * 100;\r\n            let currentPositionBar = Math.round(barWidth / 100 * currentPercentTime);\r\n\r\n            return currentPositionBar;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    let dateShow;\r\n    if (props.progressTimeMax && props.progressTimeCurrent)\r\n        dateShow = new Date(props.progressTimeMax - props.progressTimeCurrent); //1899-01-01 / X-X-X\r\n    else {\r\n        dateShow = new Date(Date.UTC(0, 0, 0, 0, 0, 0, 0));\r\n    }\r\n\r\n    let hoursLeft = dateShow.getUTCHours();\r\n    let minutesLeft = dateShow.getUTCMinutes();\r\n    let secondsLeft = dateShow.getUTCSeconds();\r\n    let mSecondsLeft = dateShow.getUTCMilliseconds();\r\n\r\n    return (\r\n        <div className=\"dateDisplay\">\r\n            <div className=\"time\">\r\n                {hoursLeft < 10 ? '0' + hoursLeft : hoursLeft}:\r\n                {minutesLeft < 10 ? '0' + minutesLeft : minutesLeft}:\r\n                {secondsLeft < 10 ? '0' + secondsLeft : secondsLeft}:\r\n                {mSecondsLeft < 10 ? '00' + mSecondsLeft :\r\n                    mSecondsLeft < 100 ? '0' + mSecondsLeft :\r\n                        mSecondsLeft === 1000 ? 999 : mSecondsLeft}\r\n            </div>\r\n\r\n            <span className=\"bar\">\r\n                <p\r\n                    className=\"bar-outer\"\r\n                    style={{\r\n                        width: barWidth + 'px'\r\n                    }}>\r\n                </p>\r\n                <p\r\n                    className=\"bar-inner\"\r\n                    style={{\r\n                        width: calculatePosition() + 'px',\r\n                    }}>\r\n                </p>\r\n            </span>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport Flatpickr from \"react-flatpickr\";\r\nimport \"flatpickr/dist/themes/dark.css\";\r\nimport DateDisplay from './DateDisplay'\r\nimport './DateController.css';\r\nimport './DateDisplay.css';\r\n\r\nexport class DateController extends React.Component {\r\n    initState = {\r\n        timestampStart: Date.now(),\r\n        timestampEnd: Date.now(),\r\n        realTimeStart: 0,\r\n        overallCorrection: 0,\r\n        progressTimeCurrent: 0,\r\n        progressTimeMax: 0,\r\n        working: false,\r\n        ended: false\r\n    };\r\n\r\n    state = this.initState;\r\n\r\n    _increasement = async () => {\r\n\r\n        let correction = Date.now() - this.state.realTimeStart;\r\n\r\n        if (this.state.timestampStart + correction >= this.state.progressTimeMax)\r\n            correction = this.state.timestampEnd - this.state.timestampStart;\r\n\r\n        await this.setState({\r\n            progressTimeCurrent: this.state.timestampStart + correction,\r\n            overallCorrection: correction,\r\n        });\r\n\r\n        if (this.state.progressTimeCurrent < this.state.progressTimeMax) {\r\n            setTimeout(this._increasement, 1);\r\n        }\r\n        else {\r\n            await this.setState({\r\n                working: false,\r\n                ended: true\r\n            });\r\n        }\r\n    }\r\n\r\n    startIncreasement = async () => {\r\n        if (!this.state.working && this.state.timestampStart < this.state.timestampEnd) {\r\n            await this.setState({\r\n                progressTimeCurrent: this.state.timestampStart,\r\n                progressTimeMax: this.state.timestampEnd,\r\n                realTimeStart: Date.now(),\r\n                working: true,\r\n                ended: false\r\n            })\r\n\r\n            setTimeout(this._increasement, 1);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dateController\">\r\n                <div className=\"pickerBlock\">\r\n                    <p>From</p>\r\n                    <Flatpickr\r\n                        data-enable-time\r\n                        value={this.state.timestampStart}\r\n                        options={{\r\n                            minuteIncrement: 1,\r\n                            enableSeconds: true\r\n                        }}\r\n                        onChange={date => {\r\n                            this.setState({ timestampStart: (new Date(date)).getTime() });\r\n                        }}\r\n                    />\r\n                    <button onClick={() => this.setState({ timestampStart: Date.now() })}>Current time</button>\r\n                </div>\r\n                <div className=\"pickerBlock\">\r\n                    <p>To</p>\r\n                    <Flatpickr\r\n                        data-enable-time\r\n                        value={this.state.timestampEnd}\r\n                        options={{\r\n                            minuteIncrement: 1,\r\n                            enableSeconds: true\r\n                        }}\r\n                        onChange={date => {\r\n                            this.setState({ timestampEnd: (new Date(date)).getTime() });\r\n                        }}\r\n                    />\r\n                    <button onClick={() => this.setState({ timestampEnd: Date.now() })}>Current time</button>\r\n                </div>\r\n\r\n                {this.state.working ?\r\n                    <DateDisplay\r\n                        timestampStart={this.state.timestampStart}\r\n                        progressTimeCurrent={this.state.progressTimeCurrent}\r\n                        progressTimeMax={this.state.progressTimeMax}\r\n                    />\r\n                    : <p className=\"no-active-bar\">Set time and press RUN</p>}\r\n                {this.state.ended ? <p className=\"timer-finished\">Last timer finished successfully</p> : null}\r\n\r\n                <span className=\"buttonsWrap\">\r\n                    <button onClick={this.startIncreasement}>Run</button>\r\n                    <button onClick={() => this.setState(this.initState)}>Reset</button>\r\n                </span>\r\n            </div >\r\n        )\r\n    }\r\n}","import './App.css';\r\nimport { DateController } from './components/DateController';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Timer</h1>\r\n      <DateController />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}